from django.db import models
from django.utils import timezone

from app.models.model_one import CustomUser

class Product(models.Model):
    id = models.BigAutoField(primary_key=True)
    create_by = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    currency = models.CharField(max_length=10)
    status = models.CharField(max_length=50, choices=[('AVAILABLE', 'Available'), ('OUT_OF_STOCK', 'Out of Stock')])
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

class Transaction(models.Model):
    id = models.AutoField(primary_key=True)
    product_id = models.ForeignKey(Product, on_delete=models.CASCADE)
    customer_id = models.BigIntegerField()
    is_Create_by_Partner = models.BooleanField(default=False)
    plan_id = models.IntegerField()
    settlement_id = models.BigIntegerField(null=True)
    full_amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=255)
    payment_links = models.TextField()
    is_late = models.BooleanField(default=False)
    is_flag = models.BooleanField(default=False)
    payment_method = models.CharField(max_length=255)
    merchant_earn_amount = models.DecimalField(max_digits=10, decimal_places=2)
    bank_charge_amount = models.DecimalField(max_digits=10, decimal_places=2)
    system_profit_amount = models.DecimalField(max_digits=10, decimal_places=2)
    customer_per_installment_amount = models.DecimalField(max_digits=10, decimal_places=2)
    is_first_pay_done = models.BooleanField(default=False)
    comments = models.TextField()
    balance_after_trans = models.DecimalField(max_digits=10, decimal_places=2)
    is_settlement_done = models.BooleanField(default=False)
    status = models.CharField(max_length=50, choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'),('REFUND', 'Refund'),('OTHERS', 'Others')])
    status_commnents = models.CharField(max_length=255,null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    create_by = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    updated_by = models.CharField(max_length=255)

class Installment(models.Model):
    id = models.BigAutoField(primary_key=True)
    transaction_id = models.ForeignKey(Transaction, on_delete=models.CASCADE)
    product_id = models.ForeignKey(Product, on_delete=models.CASCADE)
    partner_id = models.ForeignKey(CustomUser, on_delete=models.CASCADE,null=True)
    customer_id = models.BigIntegerField()
    payment_method = models.CharField(max_length=50, blank=True, null=True)
    plan_id = models.BigIntegerField()
    payment_link = models.URLField(max_length=500)
    payment_method = models.CharField(max_length=50, blank=True, null=True)
    amount = models.FloatField()
    due_date = models.DateTimeField()
    payment_date = models.DateTimeField(blank=True, null=True)
    is_pay_done = models.BooleanField(default=False)
    is_late = models.BooleanField(default=False)
    late_count = models.IntegerField(default=0)
    installment_alert_sent_count = models.IntegerField(default=0)
    status = models.CharField(max_length=50, choices=[('PAID', 'Paid'), ('PENDING', 'Pending'), ('OVERDUE', 'Overdue')])
    status_commnents = models.CharField(max_length=255,null=True)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

class Payment(models.Model):
    id = models.BigAutoField(primary_key=True)
    product_id = models.ForeignKey(Product, on_delete=models.CASCADE)
    transaction_id = models.ForeignKey(Transaction, on_delete=models.CASCADE)
    installment_id = models.ForeignKey(Installment, on_delete=models.CASCADE)
    customer_id = models.BigIntegerField()
    partner_id = models.ForeignKey(CustomUser, on_delete=models.CASCADE,null=True)
    amount = models.FloatField()
    currency = models.CharField(max_length=10)
    status = models.CharField(max_length=50, choices=[('ACTIVE', 'Active'), ('EXPIRED', 'Expired')])
    payment_link = models.URLField(max_length=500)
    payment_date = models.DateTimeField(default=timezone.now)

class LatePayment(models.Model):
    id = models.BigAutoField(primary_key=True)
    product_id = models.ForeignKey(Product, on_delete=models.CASCADE)
    partner_id = models.ForeignKey(CustomUser, on_delete=models.CASCADE,null=True)
    customer_id = models.BigIntegerField()
    penalty_fee = models.FloatField()
    due_amount_with_penalty = models.FloatField()
    due_date = models.DateTimeField()
    created_at = models.DateTimeField(default=timezone.now)


class Settlement(models.Model):
    id = models.BigAutoField(primary_key=True)
    transaction_id = models.BigIntegerField()
    partner_id = models.ForeignKey(CustomUser, on_delete=models.CASCADE,null=True)
    customer_id = models.BigIntegerField()
    bank_id = models.BigIntegerField()
    amount = models.FloatField()
    currency = models.CharField(max_length=10)
    status = models.CharField(max_length=50, choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'),('REFUND', 'Refund'),('OTHERS', 'Others')])
    status_commnents = models.CharField(max_length=255,null=True)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)
    settlement_date = models.DateTimeField(blank=True, null=True)

class Refund(models.Model):
    id = models.BigAutoField(primary_key=True)
    customer_id = models.BigIntegerField()
    partner_id = models.ForeignKey(CustomUser, on_delete=models.CASCADE,null=True)
    product_id = models.ForeignKey(Product, on_delete=models.CASCADE)
    amount = models.FloatField()
    currency = models.CharField(max_length=10)
    refund_date = models.DateTimeField(default=timezone.now)
    reason = models.CharField(max_length=255)
    status = models.CharField(max_length=50, choices=[('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PENDING', 'Pending')])
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

class Report(models.Model):
    id = models.BigAutoField(primary_key=True)
    generated_by = models.CharField(max_length=255)
    generated_at = models.DateTimeField(default=timezone.now)
    report_type = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    data = models.JSONField()

